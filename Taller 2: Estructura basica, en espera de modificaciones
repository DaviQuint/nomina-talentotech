#Taller 2 con algunas funciones y varios cambios

#-------------Funcion principal:
def funcion_principal():
    while True: #ciclo que pide datos hasta "salir"
        datos_empleados = ingresar_datos() #Se ingresan los datos de entrada (nombre, salario
                                            y dias trabajados) dentro del bucle y se añaden a la lista
        devengado = calcular_salario_devengado( datos_de_empleados["salario"] , datos_de_empleados["dias_trabajados"] )
        neto = calcular_salario_neto()


#-------------Funciones de input:

#Pedir los datos al usuario
def ingresar_datos():
    datos_de_empleados = []
    datos_de_empleados["nombre"] = str(input("Nombre: \t\t", end=" ")
    datos_de_empleados["salario"] = str(input("Salario: \t\t", end=" ")
    datos_de_empleados["dias_trabajados"] = str(input("Dias trabajados: \t", end=" ")

    return datos_de_empleados

#-------------Validaciones



#-------------Funciones de calculo:

#Funcion para calcular el salario devengado
def calcular_salario_devengado(salario_basico, dias_laborados):
    return ((salario_basico/30)*dias_laborados)

#Aparte estan la funcion de descuentos y la de auxilio de transporte que ya estan listas: 
Hay que preguntar que opinan de los cambios mostrados en libreria-nomina.py:

def calcular_aux_transporte():

def descuentos():


def calcular_salario_neto(devengado, descuentos):

def calcular_nomina_total():

def calcular totales():


#-------------Funcion de print:

def mostrar_tabla():

def mostrar_totales():



#### NUEVO #### Validaciones organizar arriba
import os #para limpiar pantalla
import constantes #Para llamar contantes
from tabulate import tabulate #para la presentacion
from colorama import Fore, Style, init 
from typing import Dict, Any, Optional, List

init(autoreset=True)

#Diccionario para almacenar empleados
empleados_registrados={}

#Funcion para limpiar pantalla en este caso devuelve el nombre del sistema operativo y aplica el comando respectivo
def limpiarPantalla ():
    if os.name == 'nt':  # Para sistemas Windows
        os.system('cls')
    else:  # Para sistemas Unix/Linux/Mac
        os.system('clear')


### *** FUNCIONES DE VALIDACIONES *** ###
#Funcion para validar el nombre del empleado
def validar_nombre():
    while True:
        nombre=input("Nombre del empleado (o 'salir' para finalizar) :\n") #pide el nombre del empleado 
        
        if not nombre: #Para que no acepte vacios
            print(Fore.RED + "Error: No puede estar el nombre vacio")
        if nombre.lower() == "salir":
            return None
        
        if all(caracter.isalpha() or caracter.isspace() for caracter in nombre):  # Para Asegurar que solo hallan letras y espacios
            return nombre
        print(Fore.RED + "Error: Ingrese un nombre valido (solo con letras)") #mensaje de error
        


#Funcion para validar el salario basico esta en el intervalo valido que es entre el salario minimo y 8.000.000
def validar_salario_basico():
    while True: 
        try: 
            salario = int(input("Salario Básico Mensual del Empleado: "))
            if constantes.SALARIO_MINIMO <= salario <= 8000000:
                return salario
            print(Fore.RED + f"Error: Ingrese un salario entre {constantes.SALARIO_MINIMO} y 8.000.000 " )
        except ValueError:
            print(Fore.RED + "Error: Ingrese un número válido.")

#Funcion para validar los dias trabajados, que no los dias de un mes
def validar_dias_laborados():
    while True:
        try:
            dias=int(input("Ingrese los dias laborados del mes: "))
            if 0 <= dias <=30:
                return dias
            print(Fore.RED + "Error: Ingrese una cantidad entre 0 y 30")
        except ValueError:
            print(Fore.RED + "Error: Ingrese un número valido. ")



    
    

        
